(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "jquery", "Vue", "CommonBase"], factory);
    }

    else{
        factory(function(key){
            if(key === "jquery")
                return window.$;
            return window[key];
        },window);
    }

})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by libra on 2017/4/7.
     */
    var $ = require("jquery");
    var Vue = require("Vue");
    var bc = require("CommonBase");
    // jQuery DataTable 中文
    var gjhDataTable_CN_Lang = {
        oAria: {
            sSortAscending: ": activate to sort column ascending",
            sSortDescending: ": activate to sort column descending"
        },
        oPaginate: {
            sFirst: "首页",
            sLast: "尾页",
            sNext: "下一页",
            sPrevious: "上一页"
        },
        sEmptyTable: "暂无数据。",
        sInfo: "显示 _START_ 到 _END_ ,共 _TOTAL_ 条",
        sInfoEmpty: "显示 0 到 0 。共 0 条",
        sInfoFiltered: "(filtered from _MAX_ total entries)",
        sInfoPostFix: "",
        sDecimal: "",
        sThousands: ",",
        sLengthMenu: "分页大小 _MENU_ ",
        sLoadingRecords: "加载中...",
        sProcessing: "加载中...",
        sSearch: "Search:",
        sUrl: "",
        sZeroRecords: "暂无数据。"
    };
    var MIX = "mix";
    var MIX_MODE_KEY = "__mode";
    var MIX_TOTAL_KEY = "__total";
    /**
     * 默认分页大小
     * @type {{pageIndex: number; pageSize: number}}
     */
    var defaultPage = { pageIndex: 1, pageSize: 10 };
    /**
     * List页面
     */
    var ListTable = (function () {
        function ListTable(el, config) {
            var o_this = this;
            this.el = el;
            this.query = {};
            this.events = {
                search: function () {
                    o_this.search.apply(o_this, arguments);
                },
                _run: function () {
                    return { instance: this, args: arguments };
                }
            };
            this._config = config;
            this.vm = {
                query: this.query,
                list: []
            };
            if (!this._config.page)
                this._config.page = defaultPage;
            this.query.pageIndex = this._config.page.pageIndex;
            this.query.pageSize = this._config.page.pageSize;
            this.query.order = "";
            this.query.orderType = "";
            this.column = new Array();
        }
        /**
         * 刷新
         */
        ListTable.prototype.reload = function () {
            bc.request(this._config.ajax, this.query, this.success, this);
        };
        /**
         * 搜索
         */
        ListTable.prototype.search = function () {
            this.query.pageIndex = 1;
            this.dt.api.page(0);
            this.reload();
        };
        ListTable.prototype.success = function (ret) {
            var data = bc.isNullOrUndefined(ret.data) ? new Array() : ret.data;
            this._isListUpdate = true;
            this._isOrder = false;
            this.totalCount = ret.count === 0 && data.length > 0 ? data.length : ret.count;
            this.vm.list.length = 0;
            $("tbody tr td[colspan]", $(this._config.listEl)).each(function(i,obj){
                if($(this).hasClass("dataTables_empty")){
                    $(this).parent().remove();
                    return false;
                }
            });
            for (var i = 0; i < data.length; i++) {
                this.vm.list.push(data[i]);
            }
            if (this.vm.list.length == 0)
                this.vm.list.sort();
        };
        ListTable.prototype.render = function () {

            var o_this = this;
            this.vueApp = new Vue({
                el: this.el,
                data: this.vm,
                methods: this.events,
                updated: function () {
                    if (!o_this._isListUpdate)
                        return;
                    o_this._isListUpdate = false;
                    if (!bc.isNullOrUndefined(o_this.dt)) {
                        o_this.dt.api.clear();
                        o_this.dt.api.setTotalCount(o_this.totalCount, o_this.dt.dt);
                        o_this.dt.api.loadDomData(o_this.dt.dt);
                        o_this.dt.api.draw();
                    }
                    else {
                        var orderColumns = new Array();
                        var columnsCount =  $("thead tr th", $(o_this._config.listEl)).length;
                        $("thead tr th", $(o_this._config.listEl)).each(function (index) {
                            var or = $(this).attr("order");
                            or = bc.getTypeDefault(or, "");
                            if (or !== "") {
                                orderColumns.push({"orderable":true});
                                o_this.column.push(bc.getJson(or));
                            }
                            else {
                                orderColumns.push({"orderable":false});
                                o_this.column.push(null);
                            }
                        });


                        var dt = $(o_this._config.listEl).dataTable({
                            "language": gjhDataTable_CN_Lang,
                            searching: false,
                            bLengthChange: false,
                            "ordering": true,
                            "columns":orderColumns,
                            "order":[],
                            bFilter: false,
                            bProcessing: true,
                            processing: true,
                            pageLength: o_this._config.page.pageSize,
                            __mode: MIX,
                            __total: o_this.totalCount
                        });
                        dt.on('page.dt', function (ev, settings) {
                            if (o_this._isOrder) {
                                o_this._isOrder = false;
                                return;
                            }
                            var info = o_this.dt.api.page.info();
                            var qequestPage = info.page + 1;
                            o_this.query.pageIndex = qequestPage;
                            o_this.reload();
                        });
                        dt.on('order.dt', function () {
                            var order = o_this.dt.api.order();
                            if(order.length!=0){
                                var field = o_this.column[order[0][0]];
                            }
                            if (field != null) {
                                if (o_this.query.order == field.field && o_this.query.orderType == order[0][1])
                                    return;
                                o_this.query.order = field.field;
                                o_this.query.orderType = order[0][1];
                                o_this._isOrder = true;
                                o_this.dt.api.page(0);
                                o_this.search();
                            }
                        });
                        o_this.dt = {
                            api: dt.api(),
                            dt: dt
                        };
                    }
                }
            });



        };
        return ListTable;
    }());
    exports.ListTable = ListTable;
});
