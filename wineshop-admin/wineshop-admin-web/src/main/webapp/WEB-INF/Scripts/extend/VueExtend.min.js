(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "Vue", "jquery", "CommonBase"], factory);
    }
    else{
        factory(function(key){
            if(key === "jquery")
                return window.$;
            return window[key];
        },window);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by libra on 2017/4/6.
     */
    var Vue = require("Vue");
    var $ = require("jquery");
    var cb = require("CommonBase");
    function getExpressionValue(instance, expression) {
        var expArray = expression.split('.');
        var beforeValue = instance.$data;
        for (var i = 0; i < expArray.length; i++) {
            beforeValue = beforeValue[expArray[i]];
        }
        return beforeValue;
    }
    function setExpressionValue(instance, expression, value) {
        var expArray = expression.split('.');
        var beforeValue = instance.$data;
        for (var i = 0; i < expArray.length - 1; i++) {
            beforeValue = beforeValue[expArray[i]];
        }
        beforeValue[expArray[expArray.length - 1]] = value;
    }
    /**
     * 时间控件代码扩展
     */
    Vue.directive('date', {
        // 当绑定元素插入到 DOM 中。
        inserted: function (el) {
            //  console.log("dTable:inserted start");
            // console.log("dTable:inserted end");
        },
        bind: function (el, binding, vnode) {
           // console.log("date:bind:start");
            var vueIns = binding.value;
            var instance = vueIns.instance;
            var expression = vueIns.args[0];
            var orValue = getExpressionValue(instance, expression);
            var defaultOrValue = cb.getTypeDefault(orValue, "");
            if (defaultOrValue != "")
                $(el).val(defaultOrValue);
            $(el).datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                dayNames: ["星期天", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                dayNamesMin: ["日", "一", "二", "三", "四", "五", "六",],
                monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                monthNamesShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                nextText: '<i class="fa fa-chevron-right"></i>',
                prevText: '<i class="fa fa-chevron-left"></i>',
                onClose: function (dateText, inst) {

                },
            });
            $(el).change(function () {
                var inputValue = $(this).val().trim();
                setExpressionValue(instance, expression, inputValue);
            });
            instance.$watch(expression, function (newVal, oldVal) {
                if (newVal !== oldVal)
                    $(el).val(newVal);
            });
           // console.log("date:bind:end");
        }
    });
    function ajax(config,val) {
        $.ajax({
            url: config.url,
            type: config.method,
            success: function (ret) {
                if (ret.success) {
                    config.success(ret.data,val);
                    //success(ret.data)
                }
                else {
                    alert(ret.message);
                }
            }, complete: function () {
            },
            data: config.data,
            statusCode: {
                404: function () {
                    // $.messager.alert("提示", "服务端返回404错误,没有找到对应的接口", "error");
                }, 403: function () {
                    // $.messager.alert("提示", "服务端返回403错误,没有权限访问对应的接口", "error");
                }, 500: function () {
                }
            }
        });
    }
    var comboxUtil = {
        /**
         * 添加下拉列表项
         * @param value
         * @param label
         * @param sb
         */
        addItem: function (value, label, sb) {
            sb.push("<option value='");
            sb.push(value);
            sb.push("'>");
            sb.push(label);
            sb.push("</option>");
        },
        /**
         * 获取默认选项
         * @param config
         */
        getDefaultOption: function (config) {
            if (cb.isNullOrUndefined(config))
                return;
            if (config.defaultOption) {
                if (cb.isNullOrUndefined(config.defaultOption.show) || config.defaultOption.show === true) {
                    if (!cb.isNullOrUndefined(config.defaultOption.label) && !cb.isNullOrUndefined(config.defaultOption.value))
                        return { label: config.defaultOption.label, value: config.defaultOption.value };
                    else
                        return { label: "全部", value: "" };
                }
                return null;
            }
            return { label: "全部", value: "" };
        },
        type: {
            q: 'q',
            c: 'c',
            d: 'd'
        },
        getConfig: function (instance, vueIns) {
            var configValue = vueIns.args[1];
            if (typeof (vueIns.args[1]) == "string") {
                configValue = getExpressionValue(instance, vueIns.args[1]);
                configValue = cb.getTypeDefault(configValue, {});
            }
            return configValue;
        }
    };
    /**
     * 根据city
     * @param cityCode
     */
    function getCity(cityCode) {
        var code = cb.getTypeDefault(cityCode, '');
        code = $.trim(code);
        if (code === '')
            return null;
        var arrays = code.split('_');
        if (arrays.length == 1)
            return { provinceCode: arrays[0], ocityCode: '', districtCode: '' };
        if (arrays.length == 2)
            return { provinceCode: arrays[0], ocityCode: arrays[1], districtCode: '' };
        if (arrays.length > 2)
            return { provinceCode: arrays[0], ocityCode: arrays[1], districtCode: arrays[2] };
    }
    exports.getCity = getCity;
    /**
     * 下拉
     */
    Vue.directive('combox', {
        // 当绑定元素插入到 DOM 中。
        inserted: function (el) {
            //  console.log("dTable:inserted start");
            // console.log("dTable:inserted end");
        },
        bind: function (el, binding, vnode) {

           // console.log("combox:bind:start");
            var vueIns = binding.value;
            var instance = vueIns.instance;
            var expression = vueIns.args[0];
            instance['_tmp_'+expression.replace('.','_')] = instance['_tmp_'+expression.replace('.','_')]?instance['_tmp_'+expression.replace('.','_')]:new Array();
            if (vueIns.args.length > 1) {
                var configValue_1 = comboxUtil.getConfig(instance, vueIns);
                var defaultOption = comboxUtil.getDefaultOption(configValue_1);
                configValue_1.success = function (data,val) {
                    var sb = new Array();
                    if (defaultOption != null)
                        comboxUtil.addItem(defaultOption.value, defaultOption.label, sb);
                    for (var i = 0; i < data.length; i++) {
                        comboxUtil.addItem(data[i][configValue_1.value], data[i][configValue_1.label], sb);
                    }

                    $(el).html(sb.join(""));
                    $(el).val(val);
                    if(cb.getTypeDefault(val,"")===""){
                        var setVal = defaultOption == null && data.length>0?data[0][configValue_1.value]: defaultOption==null? "" : defaultOption.value;
                        setExpressionValue(instance,expression,setVal);
                    }

                };

                var value = getExpressionValue(instance,expression);
                if (configValue_1.deps) {
                    // configValue_1.waitdeps= configValue_1.waitdeps ? configValue_1.waitdeps : new Array();
                    var _loop_1 = function (key) {
                        var oValue = getExpressionValue(instance,key);
                        if(oValue!==""){
                            configValue_1.data[configValue_1.deps[key].paramter] = oValue;
                            ajax(configValue_1,value);
                        }

                        instance.$watch(key, function (newVal, oldVal) {
                            if (newVal !== oldVal) {
                                configValue_1.data[configValue_1.deps[key].paramter] = newVal;
                                $(el).html('');
                                //  setExpressionValue(instance, expression, "_null_");
                                ajax(configValue_1,"");
                            }
                        });
                    };
                    for (var key in configValue_1.deps) {
                        _loop_1(key);
                    }
                }

                if (configValue_1.preLoad !== false)
                    ajax(configValue_1,value);
            }
            var orValue = getExpressionValue(instance, expression);
            var defaultOrValue = cb.getTypeDefault(orValue, "");
            if (defaultOrValue != "")
                $(el).val(defaultOrValue);
            $(el).change(function () {
                var inputValue = $.trim($(this).val());
                setExpressionValue(instance, expression, inputValue);
            });
            instance.$watch(expression, function (newVal, oldVal) {
                if (newVal !== oldVal)
                    $(el).val(newVal);
            });
           // console.log("combox:bind:end");
        }
    });
    var imgHelper={
        getImgFileLength:function(config,images) {
            if(typeof  images == "object"){
                var result = cb.getTypeDefault(config.maxFiles,1) - images.length;
                if(result===0)
                    return 1;
                return result;
            }
            var maxResult = cb.getTypeDefault(config.maxFiles,1)- (images===""?0:1);
            if(maxResult===0)
                return 1;
            return maxResult;
        } ,
        init:function(el,config,images,instance,expression){
            $(el).dropzone({
                url: config.url,
                method: config.method,
                addRemoveLinks: true,
                paramName:"img",
                maxFiles: cb.getTypeDefault(config.maxFiles,1) ,//最多允许上传图片个数
                parallelUploads: 1,//图片上传并发个数。建议设置为一，批量一个一个上传
                maxFilesize: cb.getTypeDefault(config.maxFilesize,6) ,//控制单张图片大小最大为9兆
                acceptedFiles: ".jpg,.gif,.png,.jpeg,.JPG,.GIF,.PNG,.JPEG",
                dictFallbackMessage: "您的浏览器暂不支持拖动上传哦。",
                dictMaxFilesExceeded: "不要太贪心了，您一共只能上传{{maxFiles}}张图片。",
                dictRemoveFile: "移除",
                success: function (file, response) {
                    file.previewElement.classList.add("dz-success");
                    if(response && response.Data){
                        file.url = response.Data;
                        //新上传图片，保存至imgs列表中
                        if(typeof  images == "object")
                            images.push(response.Data);
                        else
                            setExpressionValue(instance,expression,response.Data);
                    }else{
                        file.url = response;
                        //新上传图片，保存至imgs列表中
                        if(typeof  images == "object")
                            images.push(response);
                        else
                            setExpressionValue(instance,expression,response);
                    }

                },
                maxfilesexceeded: function (file) {//图片个数超过限制时功能
                    this.removeFile(file);
                },
                error: function (file, response) {
                    file.previewElement.classList.add("dz-error");
                    window["simpleNotify"]("文件上传失败，可能的原因有：<br/>1. 文件类型不正确<br/>2. 文件个数超过限制", '提示', "error");
                },

                init: function () {
                    var dropzoneInstance = this;
                    config.imgInstance = dropzoneInstance;
                    //图片从数据库初始化
                    if(typeof  images == "object"){
                        for (var i = 0; i < images.length; i++) {
                            var item = images[i];

                            var mockFile = { name: item, size: 123, accepted: true,url:item };

                            dropzoneInstance.emit("addedfile", mockFile);
                            dropzoneInstance.emit("thumbnail", mockFile, item);

                            var file = {
                                name: item,
                                size: 123,
                                serverId: 1234+i,
                                accepted: true,
                                status: 'success',
                                upload: {
                                    progress: 100,
                                    total: 123, // to fake
                                    bytesSent: 123 // to fake
                                }
                            };
                            dropzoneInstance.files.push(file);
                        }


                    }else{
                        if(images==="")
                            return;
                        var mockFile = { name: images, size: 123, accepted: true,url:images};
                        dropzoneInstance.emit("addedfile", mockFile);
                        dropzoneInstance.emit("thumbnail", mockFile, images);

                        var file = {
                            name: images,
                            size: 123,
                            serverId: 1234,
                            accepted: true,
                            status: 'success',
                            upload: {
                                progress: 100,
                                total: 123, // to fake
                                bytesSent: 123 // to fake
                            }
                        };
                        dropzoneInstance.files.push(file);
                    }


                    //对图片控件上传个数重新赋值
                    dropzoneInstance.options.maxFiles = imgHelper.getImgFileLength(config,images);
                    //删除图片
                    dropzoneInstance.on("removedfile", function (file) {
                        if (file.accepted) {
                            var url = "";
                            if (file.url) {
                                url = file.url;
                            }
                            if(typeof  images == "object"){
                                var array =   images;//frModel.Imgs();

                                for (var i = 0; i < array.length; i++) {
                                    var item = array[i];
                                    if (item == url) {
                                        array.splice(i,1);
                                    }
                                }
                            }else{
                                setExpressionValue(instance,expression,"");
                            }

                             dropzoneInstance.files.splice(0, dropzoneInstance.files.length);
                            //frModel.Imgs(newArray);
                            dropzoneInstance.options.maxFiles = imgHelper.getImgFileLength(config,images);
                        }
                    });
                }
            });


        }
    };

    /**
     * 下拉
     */
    Vue.directive('img',{
        bind:function(el, binding, vnode){
           // console.log("img:bind:start");

            let vueIns = binding.value;
            let instance  = vueIns.instance;
            let expression = vueIns.args[0];

            if(vueIns.args.length<2)
                throw '必须具有两个参数';

            let configValue = vueIns.args[1];

            if(typeof(vueIns.args[1]) == "string"){
                configValue = getExpressionValue(instance,vueIns.args[1]);
                configValue = cb.getTypeDefault(configValue,{});
            }


            let orValue = getExpressionValue(instance,expression);

            let defaultOrValue = cb.getTypeDefault(orValue,"");

            imgHelper.init(el,configValue,defaultOrValue,instance,expression);

          //  console.log("img:bind:end");
        }
    });


    Vue.directive("imgtag",{
        bind:function(el,binding,vnode){
            var vueIns = binding.value;
            var instance  = vueIns.instance;
            var expression = vueIns.args[0];

            if(vueIns.args.length<2)
                throw '必须具有两个参数';

            var config = vueIns.args[1];
           var urlValue = getExpressionValue(instance,expression);

            var rawImg = $(el).clone();
           // rawImg.hide();
         //   $(el).before(rawImg);
            $(el).parent().append("<input type='text' style='width:100px;'/>")
            rawImg.onload=function () {

                $(el).hide();
                rawImg.show();
                //$(el).attr("src",urlValue)
            }

            rawImg.onerror = function(){
                if(cb.getTypeDefault(config.error,"") !== "")
                    $(el).attr("src",config.error);
            }
            rawImg.attr("src",binding.value )
             if(cb.getTypeDefault(config.loading,"") !== "")
                 $(el).attr("src",config.loading);
            //if(binding.)
        }
    });
});
