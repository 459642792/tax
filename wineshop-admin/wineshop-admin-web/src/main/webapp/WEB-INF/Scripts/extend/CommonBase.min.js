/**
 * Created by libra on 2017/4/6.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "jquery"], factory);
    }

    else{
        window.CommonBase = {};
        factory(function(key){
            if(key === "jquery")
                return window.$;
            return window[key];
        },window.CommonBase);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var $ = require("jquery");
    function initLoading() {
        $("body").append('<div id="page_loading" style="display:none;z-index: 999999999;">' +
            '<div id="page_loading-center">' +
            '<div id="page_loading-center-absolute">' +
            '<div class="object" id="page_first_object"></div>' +
            '<div class="object" id="page_second_object"></div>' +
            '<div class="object" id="page_third_object"></div>' +
            '<div class="object" id="page_forth_object"></div></div></div></div>');
    }
    initLoading();
    function showLoading() {
        var loading = $("#page_loading");
        if (loading.length <= 0)
            initLoading();
        $("#page_loading").show();
        // $("#loadingText").html(text);
        //$("#page_loading").modal("show");
    }
    exports.showLoading = showLoading;
    function hideLoading() {
        var loading = $("#page_loading");
        if (loading.length <= 0)
            initLoading();
        $("#page_loading").hide();
        //$("#page_loading").modal("hide");
    }
    exports.hideLoading = hideLoading;
    /**
     * AJAX请求
     * @param ajax ajax 信息
     * @param data 请求数据
     * @param success 成功回调
     * @param obj 调用实例 this
     */
    function request(ajax, data, success, obj, complete) {
        showLoading();
        $.ajax({
            url: ajax.url,
            type: ajax.method,
            success: function (ret) {
                if (ret.success) {
                    if (isNullOrUndefined(obj))
                        success(ret);
                    else
                        success.call(obj, ret);
                    // if(ret.count === 0 && ret.data.length >0)
                    //     success.call(obj,ret.data,ret.data.length);
                    // else
                    //     success.call(obj,ret.data,ret.count);
                }
                else {
                    // alert(ret.message);
                    //消息业务异常，后台对应MessageException，提示弹框给用户
                    if(ret.status ==400){
                        window.simpleNotify(ret.message, '提示', "success");
                    }else{
                        //系统异常
                        window.simpleNotify(ret.message, '提示', "error");
                    }
                }
            }, complete: function () {
                hideLoading();
                if (!isNullOrUndefined(complete)) {
                    if (isNullOrUndefined(obj))
                        complete();
                    else
                        complete.call(obj);
                }
            },
            data: data,
            statusCode: {
                404: function () {
                    hideLoading();
                    window.simpleNotify("服务端返回404错误,没有找到对应的接口", '提示', "error");
                    // $.messager.alert("提示", "服务端返回404错误,没有找到对应的接口", "error");
                }, 403: function () {
                    hideLoading();
                    window.simpleNotify("服务端返回403错误,没有权限访问对应的接口", '提示', "error");
                    // $.messager.alert("提示", "服务端返回403错误,没有权限访问对应的接口", "error");
                }, 500: function () {
                    hideLoading();
                    window.simpleNotify("服务端返回内部错误", '提示', "error");
                }
            }
        });
    }
    exports.request = request;
    Date.prototype.format = function (fmt) {
        var fmtStr = getTypeDefault(fmt, "") === "" ? "yyyy-MM-dd" : fmt;
        var o = {
            "M+": this.getMonth() + 1,
            "d+": this.getDate(),
            "h+": this.getHours(),
            "m+": this.getMinutes(),
            "s+": this.getSeconds(),
            "q+": Math.floor((this.getMonth() + 3) / 3),
            "S": this.getMilliseconds() //millisecond
        };
        if (/(y+)/.test(fmtStr)) {
            fmtStr = fmtStr.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(fmtStr)) {
                fmtStr = fmtStr.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
            }
        }
        return fmtStr;
    };

    exports. checkMobile = function (value) {
        if(!(/^1[3|4|5|8][0-9]\d{8}$/.test(value))){
           // alert("不是完整的11位手机号或者正确的手机号前七位");
          //  document.mobileform.mobile.focus();
            return false;
        }
        return true;
    }

    exports.checkIdCard=function(value){
        var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
        if(reg.test(value) === false)
        {
           // alert("身份证输入不合法");
            return  false;
        }
        return true;
    }

    /**
     * 获取省市区县
     * @param str
     * @returns {any}
     */
    function getCityInfo(str) {
        var value = getTypeDefault(str, "");
        if (value === "")
            return { provinceCode: "", cityCode: "", districtCode: "" };
        var areaCodes = value.split('_');
        var pCode = areaCodes[0];
        var cCode = "";
        var dCode = "";
        if (areaCodes.length > 1)
            cCode = areaCodes[0] + "_" + areaCodes[1];
        if (areaCodes.length > 2)
            dCode = str;
        return { provinceCode: pCode, cityCode: cCode, districtCode: dCode };
    }
    exports.getCityInfo = getCityInfo;
    /**
     * 是否为空或者undefined
     * @param arg 需要判断的参数
     * @returns {boolean}
     */
    function isNullOrUndefined(arg) {
        if (typeof arg == "undefined")
            return true;
        if (arg == null)
            return true;
        return false;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    /**
     * 获取默认值
     * @param arg 参数
     * @param dfVal 默认值
     * @returns {any}
     */
    function getTypeDefault(arg, dfVal) {
        if (isNullOrUndefined(arg))
            return dfVal;
        return arg;
    }
    exports.getTypeDefault = getTypeDefault;
    /**
     * 获取JSON
     * @param str JSON字符串，key 不需要用双引号
     * @returns {any}
     */
    function getJson(str) {
        if (str === "" || str == null)
            return {};
        if (str.indexOf("{") == 0 && str.indexOf("}") == str.length - 1)
            return new Function("return " + str + ";")();
        return new Function("return {" + str + "};")();
    }
    exports.getJson = getJson;
    /**
     * 时间格式化
     * @param date 时间
     * @param format 格式化字符串 默认为:yyyy-MM-dd
     * @returns {String}
     */
    function dateFormat(date, format) {
        if (isNullOrUndefined(date))
            return "";
        return date.format(format);
    }
    exports.dateFormat = dateFormat;
});
