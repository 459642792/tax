package com.blueteam.wineshop.service;

import com.blueteam.base.constant.Enums;
import com.blueteam.entity.dto.BaseResult;
import com.blueteam.entity.dto.MessageRecipient;
import com.blueteam.entity.dto.VendorSearch;
import com.blueteam.entity.po.CityInfo;
import com.blueteam.entity.dto.PageResult;
import com.blueteam.entity.po.VendorInfo;
import org.apache.ibatis.annotations.Param;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

/**
 * @author Marx
 * <p>
 * VendorInfoService.java
 * <p>
 * 2017年2月22日**@version 1.0
 */
public interface VendorInfoService {

    /**
     * @param CityCode
     * @return
     */
    List<VendorInfo> VendorInfoList(String CityCode);

    List<VendorInfo> VendorInfoLists(String CityCode);

    /**
     * @param Id
     * @return
     */
    VendorInfo vendorDetail(int Id);

    /**
     * @param Id
     * @param VisitCount
     * @return
     */
    int updateVisit(int Id, int VisitCount);

    /**
     * @param Name
     * @return
     */
    List<VendorInfo> vendorInfoQuey(String Name);


    /**
     * 查询该区域的商家信息
     *
     * @param Name
     * @param CityCode
     * @return
     */
    List<VendorInfo> quyuList(String Name, String CityCode);

    /**
     * 查询运营商管理区域范围的所有商家
     *
     * @param userId               运营商用户ID
     * @param authenticationStatus 商家审核状态
     * @param auditStatus          是否加V
     * @return
     */
    PageResult<List<VendorInfo>> carriersVendors(Integer userId, Enums.VendorStatus authenticationStatus, String auditStatus, Integer pageIndex, Integer pageSize);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VendorInfo
     *
     * @mbg.generated Mon Feb 20 17:40:15 CST 2017
     */
    int insert(VendorInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VendorInfo
     *
     * @mbg.generated Mon Feb 20 17:40:15 CST 2017
     */
    int updateByPrimaryKey(VendorInfo record);

    /**
     * 获取运营商下面的商家详情
     *
     * @param carrisId 运营商ID
     * @param vendorId 商家ID
     * @return
     */
    VendorInfo getCarriersVendor(int carrisId, int vendorId);


    /**
     * 获取运营商下面 提交了资料等待认证审核的商家
     *
     * @param userId    运营商用户ID
     * @param pageIndex 页码
     * @param pageSize
     * @return
     */
    PageResult<List<VendorInfo>> carriersPreAuthVendors(Integer userId, Integer pageIndex, Integer pageSize);


    /**
     * 获取运营商下面的商家详情 根据运营商用户ID
     *
     * @param userId   运营商用户 ID
     * @param vendorId 商家ID
     * @return
     */
    VendorInfo getCarriersVendorByUserID(int userId, int vendorId);


    /**
     * 查询运营商下面的商家
     *
     * @param carriersId  运营商ID
     * @param orderField  排序字段
     * @param orderBy     ASC OR DESC
     * @param status      状态
     * @param auditStatus 加V状态
     * @param pageIndex   页码
     * @param pageSize
     * @return
     */
    PageResult<List<VendorInfo>> carriersVendorList(Integer carriersId, String orderField, String orderBy, Enums.VendorStatus status, String auditStatus, Integer pageIndex, Integer pageSize);

    String updateByModel(VendorInfo model) throws Exception;

    VendorInfo findByUserId(Integer userId);

    /**
     * <b>获取商家的首页信息</b><br/>
     * 包括：店招图片、店铺名称、谁状态、今日交易额、累计交易额、账户余额(暂时用累计交易额)
     *
     * @param vendorId
     * @return
     */
    Map<String, Object> fetchIndexInfo(int vendorId);

    CityInfo updateCityInfo(String code);


    /**
     * 根据搜索条件分页查询商家
     *
     * @param search
     * @return
     */
    PageResult<List<VendorInfo>> selectVendorListByWhere(VendorSearch search);


    /**
     * 管理员添加商家
     * 会先添加用户
     * 然后在添加商户
     * <p>
     * 创建用户 取 vendor.getCreateBy()
     * 用户所在区域 取 vendor.getCityCode()
     *
     * @param phone  电话号码
     * @param vendor 商家信息
     * @return
     * @throws Exception
     */
    @Transactional
    BaseResult adminAddVendor(String phone, VendorInfo vendor) throws Exception;

    /**
     * 根据商家ID获取商家信息
     *
     * @param id 商家ID
     * @return
     */
    VendorInfo getVendorById(Integer id);

    /**
     * 根据区域code获取商家列表
     *
     * @param vendorInfo 城市代码
     * @return
     */
    List<VendorInfo> selectVendorByAreas(VendorInfo vendorInfo);

    /**
     * 认证商家，加V
     *
     * @param userId     执行认证用户ID
     * @param vendorId   待认证商家ID
     * @param authStatus 认证的目标状态
     * @param reason     认证通过/不通过 的理由
     * @return
     */

    BaseResult adminAuthenticate(int userId, int vendorId, Enums.VendorStatus authStatus, String reason);


    /**
     * 管理员认证商家
     *
     * @param userId 管理员用户ID
     * @param param  认证信息
     * @return
     */
    BaseResult adminAuthenticateVendor(int userId, VendorInfo param);

    /**
     * 发现商家列表
     *
     * @param CityCode
     * @return
     */
    List<VendorInfo> DiscoverVendorList(String CityCode);

    /**
     * 推荐商家列表
     *
     * @param CityCode
     * @return
     */
    List<VendorInfo> VendorRecommendList(String CityCode);

    /**
     * 方法的功能描述:TODO 获取 消息接收者实体
     *
     * @param
     * @return
     * @methodName
     * @author xiaojiang 2017/5/22 15:11
     * @since 1.3.0
     */
    MessageRecipient getMessageRecipient(Integer vendorInfoId);

    /**
     * 根据ID获取商家和城市信息
     *
     * @param id
     * @return
     */
    VendorInfo getVendorAndCityById(@Param("id") Integer id);

    /**
     * 根据venderid 获取用户昵称和商家名称
     *
     * @param id 商家ID
     * @return
     */
    VendorInfo getVenderAndUserName(Integer id);

    /**
     * 方法的功能描述:TODO 根据商家id 获取C端显示商家详情
     *
     * @return
     * @methodName
     * @param: null
     * @author xiaojiang 2017/10/19 15:16
     * @modifier
     * @since 1.4.0
     */
    Map<String, Object> getVendorByDetails(Integer vendorId);


    /**
     * 保存企业资质认证信息
     * @param info
     * @return
     */
    int saveAuthentication(VendorInfo info);

    /**
     * 修改店铺信息
     * @param info
     * @return
     */
    int updateVendorInfo(VendorInfo info);

    /**
     * 获取店铺信息
     * @param id
     * @return
     */
    VendorInfo getNewVendorById(int id);

    /**
     * 修改统计数据
     * @param vendorId
     * @param volume
     * @param pageViews
     * @param salesAmount
     * @return
     */
    int increaseOrderStatistics(Integer vendorId,Integer volume,
                                Integer pageViews,Integer salesAmount);

    /**
     * 寄送二维码贴纸
     * @param vendorId
     * @return
     */
    int sendQRCode(Integer vendorId);


    /**
     * 根据userid获取店铺信息
     * @param userId
     * @return
     */
    VendorInfo getNewVendorByUserId(Integer userId);

    /**
     * 支付方式和支付渠道
     * @param vendorId
     */
    void bindPayInfo(Integer vendorId);

}
